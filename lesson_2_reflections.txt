##########
What happens when you initialize a repository? Why do you need to do it?

Initializing the repo tells git that you want to treat the directory as a git repo. Once git learns this it does some setup to allow for tracking commits once you start committing. I'm not sure at the moment why this is necessary. Might the user be able to communicate the intent to establish a certain directory as a git repo as he/she makes his/her initiral commit?
##########


##########
How is the staging area different from the working directory and the repository? What value do you think it offers?

It seems like a nice way to separate the files that relate to the current commit from those that are related to the project but not the current commit. If we included everything in the cwd in our commits we would have a harder time sorting through the history.
##########


##########
How can you use the staging area to make sure you have one commit per logical change?

The developer may make several have worked on several logical changes since the last commit when one of those changes becomes ready to commit. Since the other changes are not ready to be committed, we do not want to include them in the commit. We also do not want to wait for everything to be ready before making a commit. This might limit the type or number of changes we would be willing to work on in any period between commits. We do not want that restriction, so we can make use of the staging area so that only the changes that are ready to commit make it into the repo (and thus the history).
##########


##########
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

It would be helpful to have branches when experiementing with new features that may or may not be incorporated into the program later. We can avoid some of the overhead in making both the main and experimental branches to run successful in one application until we know that we want to go that route. We may also want branches when we want to have a stable, tested version of app ready to demo but we want to keep working in the time between whenever that demo version is ready and the actual demo. We might also have different branches that run on different environments. For exmaple, when we are developing code on our local machines or AWS or whatever, but we know that eventually we will deploy on a client's machine and link to their databases, etc.
##########


##########
How do the diagrams help you visualize the branch structure?

The subway style diagrams we are using help us build a menal model of git's commit/branch system. Each commit represents a node. Each node belongs to a branch, except those that don't. In those case we enter "detached head" mode, and git warns us of the implications. One aspect of the system that isn't made clear by the diagrams is that the "active" commit gets carried over to a new branch that is created and checked out.
##########


##########
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The merge algorithm tries to incorporate all relevant changes from two (or more?) branches into one working program. This worked in our simple example, and I imagine in many simple cases this is an effective process that requires no manual cleanup. But with sufficiently complex programs this type of automatic merge seems like it could be problematic. If it cannot do the full merge on its own hopefully it makes the developer's manual cleanup effort much more efficient by taking care of the sections it is confident about and calling out the sections that require human attention. But can we trust its confidence? If we shouldn't but we do we could run into serious problems. Regarding the diagrams... again they offer a nice means for building a mental model of the flow of our repositories and the history we can expect after the merge. 
##########




